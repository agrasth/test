
# resources:
#   - name: S_NpmPublish_8118_001_GitRepo
#     type: GitRepo
#     configuration:
#       gitProvider: s_pipeAutoSCM2
#       path: agrasth/test
#   - name: S_NpmPublish_8118_001_BuildInfo
#     type: BuildInfo
#     configuration:
#       sourceArtifactory: jfrogAccessToken

# pipelines:
#   - name: pipeline_S_NpmPublish_8118_001
#     configuration:
#       environmentVariables:
#         readOnly:
#           JFROG_CLI_BUILD_NUMBER: ${run_id}
#     steps:
#       - name: S_NpmPublish_8118_001_1
#         type: NpmBuild
#         configuration:
#           sourceLocation: "tests/npm"
#           resolverRepo: "test-automation-npm-remote"
#           inputResources:
#             - name: S_NpmPublish_8118_001_GitRepo
#           integrations:
#             - name: jfrogAccessToken
#         execution:
#           onStart:
#             - replace_envs ${res_S_NpmPublish_8118_001_GitRepo_resourcePath}/tests/npm/package.json
#           onSuccess:
#             - restore_run_files $S_NpmPublish_8118_001_1_sourceStateName S_NpmPublish_8118_001_1.tar.gz
#             - if [ -d S_NpmPublish_8118_001_1.tar.gz ]; then echo "Source state is already uncompressed.  Wrong buildplane?"; return 1; fi
#             - mkdir -p state
#             - tar -xzf S_NpmPublish_8118_001_1.tar.gz -C state
#             - add_run_files state $S_NpmPublish_8118_001_1_sourceStateName
#       - name: S_NpmPublish_8118_001_2
#         type: NpmPublish
#         configuration:
#           autoPublishBuildInfo: true
#           deployerRepo: "test-automation-npm-local"
#           inputSteps:
#             - name: S_NpmPublish_8118_001_1
#           outputResources:
#             - name: S_NpmPublish_8118_001_BuildInfo
#           integrations:
#             - name: jfrogAccessToken
#       - name: S_NpmPublish_8118_001_3
#         type: Bash
#         configuration:
#           inputResources:
#             - name: S_NpmPublish_8118_001_BuildInfo
#           integrations:
#             - name: jfrogAccessToken
#         execution:
#           onExecute:
#             - jfrog rt curl -XGET /api/build/${JFROG_CLI_BUILD_NAME}/${JFROG_CLI_BUILD_NUMBER} -o ${step_tmp_dir}/response
#             - jfrog rt curl -XDELETE /api/build/${JFROG_CLI_BUILD_NAME}?buildNumbers=${JFROG_CLI_BUILD_NUMBER}&artifacts=1
#             - if [ "$res_S_NpmPublish_8118_001_BuildInfo_buildName" != "${JFROG_CLI_BUILD_NAME}" ] ; then return 1; fi
#             - if [ "$res_S_NpmPublish_8118_001_BuildInfo_buildNumber" != "${JFROG_CLI_BUILD_NUMBER}" ] ; then return 1; fi
