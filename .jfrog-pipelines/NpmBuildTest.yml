
pipelines:
  - name: agrasth_hello_world
    steps:
      - name: first
        type: Bash
        configuration:
          inputResources:
            - name: resource_agrasthGit
        execution:
          onStart:
            - docker version
            -  docker --version
            - echo "onStart can be used to do some setup or initialization of your dependencies to prepare for the execution."
            - add_pipeline_variables global_var="I persist across runs"
            - add_run_variables local_var="I persist only within this run"
            - echo "Set a pipeline variable and a run variable"
          onExecute:
            - echo "onExecute is the main section where you would issue your build/test commands"
            - jfrog --version
            - echo "{{ .Values.namePrefix }}_repo sha is $(find_resource_variable {{ .Values.namePrefix }}_repo commitSha)"
            - echo "Accessing pipeline variable in first step: $global_var"
            - echo "Accessing run variable in first step: $local_var"
          onSuccess:
            - echo "onSuccess executes if the onStart or onExecute sections completed without errors"
          onFailure:
            - echo "onFailure executes if either onStart or onExecute end in failure or error."
          onComplete:
            - echo "onComplete executes after onSuccess or onFailure"

      - name: variable_selection
        type: Bash
        configuration:
          inputSteps:
            - name: first
          environmentVariables:
            forceFail:
              default: "false"
              description: "set to 'true' to force the step to fail."
              values:
                - "false"
                - "true"
        execution:
          onStart:
            - if [ ${forceFail} == "true" ]; then exit 1; fi
          onExecute:
            - echo "This step will succeed"
          onFailure:
            - echo "step has failed."
          onSuccess:
            - echo "step has succeeded."
          onComplete:
            - echo "onComplete executes regardless of success or failure. forceFail is ${forceFail}"

      - name: add_run_variable
        type: Bash
        configuration:
          inputSteps:
            - name: first
        execution:
          onStart:
            - echo "This step will save a value to a run variable."
          onExecute:
            - add_run_variables step_info="runNumber $run_number, step_name $step_name, pipeline_name $pipeline_name"
